---
import Layout from "../layouts/Layout.astro";
---

<Layout title="EQRng.com - Random Zone Generator" currentPage="zone">
    <div class="max-w-4xl mx-auto px-4 py-8">
        <div id="result" class="mb-6"></div>
        <div
            class="bg-slate-800 rounded-lg shadow-xl border border-slate-600/20 p-6"
        >
            <h1 class="text-3xl font-bold text-white mb-6">
                Random EverQuest Zone
            </h1>

            <div class="grid grid-cols-4 gap-4 mb-6">
                <div>
                    <label
                        class="block text-sm font-medium text-slate-300 mb-2"
                    >
                        Min Level
                    </label>
                    <select
                        id="min"
                        class="w-full p-2 bg-slate-700 border border-slate-600 text-white rounded-md focus:ring-blue-400 focus:border-blue-400"
                    >
                        <option value="">Any</option>
                    </select>
                </div>

                <div>
                    <label
                        class="block text-sm font-medium text-slate-300 mb-2"
                    >
                        Max Level
                    </label>
                    <select
                        id="max"
                        class="w-full p-2 bg-slate-700 border border-slate-600 text-white rounded-md focus:ring-blue-400 focus:border-blue-400"
                    >
                        <option value="">Any</option>
                    </select>
                </div>

                <div class="col-span-2">
                    <label
                        class="block text-sm font-medium text-slate-300 mb-2"
                    >
                        Expansion
                    </label>
                    <select
                        id="expansion"
                        class="w-full p-2 bg-slate-700 border border-slate-600 text-white rounded-md focus:ring-blue-400 focus:border-blue-400"
                    >
                        <option value="">Any</option>
                        <option>Classic</option>
                        <option>Kunark</option>
                        <option>Velious</option>
                        <option>Shadows of Luclin</option>
                        <option>Planes of Power</option>
                        <option>The Legacy of Ykesha</option>
                        <option>Lost Dungeons of Norrath</option>
                        <option>Gates of Discord</option>
                        <option>Omens of War</option>
                        <option>Dragons of Norrath</option>
                        <option>Depths of Darkhollow</option>
                        <option>Prophecy of Ro</option>
                        <option>The Serpent's Spine</option>
                        <option>The Buried Sea</option>
                        <option>Secrets of Faydwer</option>
                        <option>Seeds of Destruction</option>
                        <option>Underfoot</option>
                        <option>House of Thule</option>
                        <option>Veil of Alaris</option>
                        <option>Rain of Fear</option>
                        <option>Call of the Forsaken</option>
                        <option>The Darkened Sea</option>
                        <option>The Broken Mirror</option>
                        <option>Empires of Kunark</option>
                        <option>Ring of Scale</option>
                        <option>The Burning Lands</option>
                        <option>Torment of Velious</option>
                        <option>Claws of Veeshan</option>
                        <option>Terror of Luclin</option>
                        <option>Night of Shadows</option>
                        <option>Laurion's Song</option>
                        <option>The Outer Brood</option>
                    </select>
                </div>
            </div>

            <button
                id="generate-zone"
                class="w-full bg-blue-600 hover:bg-blue-500 text-white font-medium py-3 px-4 rounded-md transition-colors shadow-lg"
            >
                Generate Random Zone
            </button>
        </div>
    </div>

    <script>
        // Populate level dropdowns
        ["min", "max"].forEach((id) => {
            const select = document.getElementById(id);
            if (select) {
                for (let i = 1; i <= 125; i++) {
                    const option = document.createElement("option");
                    option.value = i.toString();
                    option.textContent = i.toString();
                    select.appendChild(option);
                }
            }
        });

        // Generate zone handler
        const generateButton = document.getElementById("generate-zone");
        if (generateButton) {
            generateButton.onclick = async () => {
                const params = new URLSearchParams();
                const minElement = document.getElementById(
                    "min",
                ) as HTMLSelectElement;
                const maxElement = document.getElementById(
                    "max",
                ) as HTMLSelectElement;
                const expansionElement = document.getElementById(
                    "expansion",
                ) as HTMLSelectElement;

                const min = minElement?.value || "";
                const max = maxElement?.value || "";
                const expansion = expansionElement?.value || "";

                if (min) params.set("min", min);
                if (max) params.set("max", max);
                if (expansion) params.set("expansion", expansion);
                params.set("mission", "false"); // Always exclude mission zones

                const resultDiv = document.getElementById("result");
                if (!resultDiv) return;

                resultDiv.innerHTML =
                    '<div class="text-center text-blue-400">Loading...</div>';

                try {
                    const response = await fetch(`/random_zone?${params}`);
                    if (!response.ok) {
                        resultDiv.innerHTML =
                            '<div class="bg-red-900/50 border border-red-600 text-red-200 px-4 py-3 rounded">No zones found matching your criteria.</div>';
                        return;
                    }

                    const zone = await response.json();
                    resultDiv.innerHTML = `
            <div class="bg-slate-700 border border-slate-600 rounded-lg p-6">
              <h2 class="text-2xl font-bold text-white mb-4">${zone.name}</h2>
              <div class="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm">
                <div class="flex justify-between"><span class="font-medium text-slate-300">Levels:</span> <span class="text-white">${zone.level_ranges.map((r: number[]) => r.join("â€“")).join(", ")}</span></div>
                <div class="flex justify-between"><span class="font-medium text-slate-300">Expansion:</span> <span class="text-white">${zone.expansion}</span></div>
                <div class="flex justify-between"><span class="font-medium text-slate-300">Continent:</span> <span class="text-white">${zone.continent || "Unknown"}</span></div>
                <div class="flex justify-between"><span class="font-medium text-slate-300">Type:</span> <span class="text-white">${zone.zone_type}</span></div>
                <div class="flex justify-between"><span class="font-medium text-slate-300">Mission Zone:</span> <span class="${zone.mission ? "text-green-400" : "text-slate-400"}">${zone.mission ? "Yes" : "No"}</span></div>
                <div class="flex justify-between"><span class="font-medium text-slate-300">Hot Zone:</span> <span class="${zone.hot_zone ? "text-orange-400" : "text-slate-400"}">${zone.hot_zone ? "Yes" : "No"}</span></div>
              </div>
              ${
                  zone.connections.length > 0
                      ? `
                <div class="mt-4 pt-4 border-t border-slate-600">
                  <div class="font-medium mb-2 text-slate-300">Connections:</div>
                  <div class="text-sm text-white">${zone.connections.join(", ")}</div>
                </div>
              `
                      : ""
              }

              <div class="mt-6 pt-4 border-t border-slate-600">
                <div class="font-medium mb-3 text-slate-300">Rate this zone:</div>
                <div id="rating-container-${zone.id}" class="rating-container" data-zone-id="${zone.id}">
                  <div class="flex items-center gap-1 mb-2">
                    ${Array.from(
                        { length: 5 },
                        (_, i) => `
                      <button class="pickle-rating" data-rating="${i + 1}">
                        <img src="/assets/images/pickle.png" alt="Pickle ${i + 1}" class="w-6 h-6 pickle-icon opacity-30 hover:opacity-100 transition-opacity duration-200" />
                      </button>
                    `,
                    ).join("")}
                  </div>
                  <div class="rating-stats text-sm text-slate-400">
                    <span id="rating-text-${zone.id}">Loading ratings...</span>
                  </div>
                </div>
              </div>
            </div>
          `;

                    // Load and setup rating functionality
                    loadZoneRating(zone.id);

                    // Load and display zone notes
                    loadZoneNotes(zone.id);
                } catch (error) {
                    resultDiv.innerHTML =
                        '<div class="bg-red-900/50 border border-red-600 text-red-200 px-4 py-3 rounded">Error loading zone. Please try again.</div>';
                }
            };
        }

        // Function to load and display zone notes
        async function loadZoneNotes(zoneId) {
            try {
                const response = await fetch(`/zones/${zoneId}/notes`);
                if (response.ok) {
                    const notes = await response.json();
                    displayZoneNotes(notes);
                }
            } catch (error) {
                console.error("Error loading zone notes:", error);
            }
        }

        // Function to display zone notes
        function displayZoneNotes(notes) {
            if (!notes || notes.length === 0) return;

            const resultDiv = document.getElementById("result");
            if (!resultDiv) return;

            // Find the zone display div
            const zoneDiv = resultDiv.querySelector(".bg-slate-700");
            if (!zoneDiv) return;

            // Create notes section
            const notesHtml = `
                <div class="mt-4 pt-4 border-t border-slate-600">
                    <div class="font-medium mb-3 text-slate-300">Zone Notes:</div>
                    <div class="space-y-2">
                        ${notes
                            .map(
                                (note, index) => `
                            <div class="flex items-center gap-2">
                                <span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium text-white ${note.note_type.color_class}">
                                    ${note.note_type.display_name}
                                </span>
                                <span class="text-sm text-slate-300 note-content" data-note-index="${index}">${note.content}</span>
                            </div>
                        `,
                            )
                            .join("")}
                    </div>
                </div>
            `;

            // Find the rating section and insert notes before it
            const ratingSection = zoneDiv.querySelector(
                ".mt-6.pt-4.border-t.border-slate-600",
            );
            if (ratingSection) {
                ratingSection.insertAdjacentHTML("beforebegin", notesHtml);

                // Process note content for HTML links
                processNoteContent(notes);
            }
        }

        // Function to process note content and enable HTML rendering
        function processNoteContent(notes) {
            if (!notes || notes.length === 0) return;

            notes.forEach((note, index) => {
                const noteElement = document.querySelector(
                    `.note-content[data-note-index="${index}"]`,
                );
                if (noteElement && note.content) {
                    // Allow basic HTML tags like <a>, <strong>, <em>, etc.
                    // This is safe for admin-controlled content
                    noteElement.innerHTML = note.content;

                    // Style any links
                    const links = noteElement.querySelectorAll("a");
                    links.forEach((link) => {
                        link.className =
                            "text-blue-400 hover:text-blue-300 underline";
                        link.target = "_blank";
                        link.rel = "noopener noreferrer";
                    });
                }
            });
        }

        // Rating system functions
        async function loadZoneRating(zoneId) {
            try {
                const userIp = await getUserIP();
                const response = await fetch(
                    `/zones/${zoneId}/rating?user_ip=${encodeURIComponent(userIp)}`,
                );
                if (response.ok) {
                    const ratingData = await response.json();
                    updateRatingDisplay(zoneId, ratingData);
                    setupRatingInteractivity(zoneId, userIp);
                }
            } catch (error) {
                console.error("Error loading rating:", error);
                document.getElementById(`rating-text-${zoneId}`).textContent =
                    "Rating unavailable";
            }
        }

        function updateRatingDisplay(zoneId, ratingData) {
            const container = document.getElementById(
                `rating-container-${zoneId}`,
            );
            const ratingText = document.getElementById(`rating-text-${zoneId}`);

            // Update rating text
            if (ratingData.total_ratings > 0) {
                ratingText.textContent = `Average: ${ratingData.average_rating.toFixed(1)}/5 (${ratingData.total_ratings} rating${ratingData.total_ratings !== 1 ? "s" : ""})`;
            } else {
                ratingText.textContent = "No ratings yet";
            }

            // Highlight user's rating if they have one
            if (ratingData.user_rating) {
                highlightRating(zoneId, ratingData.user_rating, true);
            }
        }

        function setupRatingInteractivity(zoneId, userIp) {
            const container = document.getElementById(
                `rating-container-${zoneId}`,
            );
            const pickleButtons = container.querySelectorAll(".pickle-rating");

            pickleButtons.forEach((button) => {
                const rating = parseInt(
                    (button as HTMLElement).dataset.rating || "0",
                );

                // Hover effects
                button.addEventListener("mouseenter", () => {
                    highlightRating(zoneId, rating, false);
                });

                button.addEventListener("mouseleave", () => {
                    // Reset to user's actual rating or no highlight
                    const currentUserRating = (container as HTMLElement).dataset
                        .userRating;
                    if (currentUserRating) {
                        highlightRating(
                            zoneId,
                            parseInt(currentUserRating),
                            true,
                        );
                    } else {
                        clearRatingHighlight(zoneId);
                    }
                });

                // Click to submit rating
                button.addEventListener("click", async () => {
                    await submitRating(zoneId, rating, userIp);
                });
            });
        }

        function highlightRating(zoneId, rating, isPermanent) {
            const container = document.getElementById(
                `rating-container-${zoneId}`,
            );
            const pickleButtons = container.querySelectorAll(".pickle-rating");

            pickleButtons.forEach((button, index) => {
                const img = button.querySelector("img");

                if (index < rating) {
                    // Highlight this pickle - full opacity
                    if (img) img.style.opacity = "1";
                } else {
                    // Keep transparent
                    if (img) img.style.opacity = "0.3";
                }
            });

            if (isPermanent) {
                (container as HTMLElement).dataset.userRating =
                    rating.toString();
            }
        }

        function clearRatingHighlight(zoneId) {
            const container = document.getElementById(
                `rating-container-${zoneId}`,
            );
            const pickleButtons = container.querySelectorAll(".pickle-rating");

            pickleButtons.forEach((button, index) => {
                const img = button.querySelector("img");

                // Reset to transparent state
                if (img) img.style.opacity = "0.3";
            });
        }

        async function submitRating(zoneId, rating, userIp) {
            try {
                const response = await fetch(
                    `/zones/${zoneId}/rating?user_ip=${encodeURIComponent(userIp)}`,
                    {
                        method: "POST",
                        headers: {
                            "Content-Type": "application/json",
                        },
                        body: JSON.stringify({ rating: rating }),
                    },
                );

                if (response.ok) {
                    const ratingData = await response.json();
                    updateRatingDisplay(zoneId, ratingData);
                    highlightRating(zoneId, rating, true);
                } else {
                    throw new Error("Failed to submit rating");
                }
            } catch (error) {
                console.error("Error submitting rating:", error);
                alert("Failed to submit rating. Please try again.");
            }
        }

        async function getUserIP() {
            try {
                const response = await fetch(
                    "https://api.ipify.org?format=json",
                );
                const data = await response.json();
                return data.ip;
            } catch (error) {
                console.error("Error getting IP:", error);
                return "127.0.0.1"; // Fallback IP
            }
        }
    </script>
</Layout>
