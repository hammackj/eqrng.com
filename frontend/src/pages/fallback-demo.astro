---
import Layout from "../layouts/Layout.astro";
---

<Layout title="EQRng.com - Fallback Logic Demo" currentPage="">
    <div class="max-w-4xl mx-auto px-4 py-8">
        <h1 class="text-3xl font-bold text-white mb-6 text-center">
            Random Class Generator - Fallback Logic Demo
        </h1>

        <div
            class="bg-slate-800 rounded-lg shadow-xl border border-slate-600/20 p-6 mb-8"
        >
            <h2 class="text-xl font-bold text-white mb-4">
                How the Robust Fallback Works
            </h2>
            <div class="space-y-4 text-slate-300">
                <div class="bg-slate-700 rounded p-4">
                    <h3 class="text-lg font-semibold text-purple-400 mb-2">
                        Step 1: Race Selection
                    </h3>
                    <p>
                        When "Random Race + Class" is selected, the system tries
                        up to 3 different races to find one with available
                        classes.
                    </p>
                </div>

                <div class="bg-slate-700 rounded p-4">
                    <h3 class="text-lg font-semibold text-purple-400 mb-2">
                        Step 2: Class Lookup
                    </h3>
                    <p>
                        For each race, it checks if compatible classes exist. If
                        not, it tries another race.
                    </p>
                </div>

                <div class="bg-slate-700 rounded p-4">
                    <h3 class="text-lg font-semibold text-purple-400 mb-2">
                        Step 3: Fallback to Any Race
                    </h3>
                    <p>
                        If no race yields classes after 3 attempts, it falls
                        back to selecting any random class.
                    </p>
                </div>

                <div class="bg-slate-700 rounded p-4">
                    <h3 class="text-lg font-semibold text-purple-400 mb-2">
                        Step 4: Final Guarantee
                    </h3>
                    <p>
                        As a last resort, if everything fails, it makes one
                        final attempt to get any random class.
                    </p>
                </div>
            </div>
        </div>

        <div
            class="bg-slate-800 rounded-lg shadow-xl border border-slate-600/20 p-6 mb-8"
        >
            <h2 class="text-xl font-bold text-white mb-4">
                Simulate Different Scenarios
            </h2>
            <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                <button
                    id="simulate-success"
                    class="bg-green-600 hover:bg-green-500 text-white font-medium py-3 px-4 rounded transition-colors"
                >
                    Simulate: Race Found with Classes
                </button>
                <button
                    id="simulate-fallback"
                    class="bg-orange-600 hover:bg-orange-500 text-white font-medium py-3 px-4 rounded transition-colors"
                >
                    Simulate: Race with No Classes
                </button>
                <button
                    id="simulate-api-error"
                    class="bg-red-600 hover:bg-red-500 text-white font-medium py-3 px-4 rounded transition-colors"
                >
                    Simulate: API Error
                </button>
                <button
                    id="simulate-final-fallback"
                    class="bg-purple-600 hover:bg-purple-500 text-white font-medium py-3 px-4 rounded transition-colors"
                >
                    Simulate: Final Fallback
                </button>
            </div>
        </div>

        <div id="demo-result" class="min-h-32"></div>
    </div>

    <script>
        // Same mapping function as the main class page
        function getClassImagePath(className) {
            const classImageMap = {
                Warrior: "warrior.png",
                Cleric: "cleric.png",
                Paladin: "paladin.png",
                Ranger: "ranger.png",
                "Shadow Knight": "shadowknight.png",
                Druid: "druid.png",
                Monk: "monk.png",
                Bard: "bard.png",
                Rogue: "rogue.png",
                Shaman: "shaman.png",
                Necromancer: "necromancer.png",
                Wizard: "wizard.png",
                Magician: "magician.png",
                Enchanter: "enchanter.png",
                Beastlord: "beastlord.png",
                Berserker: "warrior.png", // Fallback
            };
            return classImageMap[className] || "warrior.png";
        }

        // Mock data for simulation
        const mockRaces = ["Human", "Troll", "Drakkin", "Froglok", "High Elf"];
        const mockClasses = [
            "Warrior",
            "Cleric",
            "Wizard",
            "Shadow Knight",
            "Beastlord",
        ];
        const raceClassMap = {
            Human: ["Warrior", "Cleric", "Paladin", "Wizard"],
            Troll: ["Warrior", "Shadow Knight", "Shaman"],
            "High Elf": ["Cleric", "Paladin", "Wizard", "Enchanter"],
            Drakkin: null, // Simulate problematic race
            Froglok: null, // Simulate problematic race
        };

        function simulateRandomRace() {
            return mockRaces[Math.floor(Math.random() * mockRaces.length)];
        }

        function simulateRandomClass() {
            return mockClasses[Math.floor(Math.random() * mockClasses.length)];
        }

        function simulateClassForRace(race) {
            const classes = raceClassMap[race];
            if (!classes) return null;
            return classes[Math.floor(Math.random() * classes.length)];
        }

        function displayResult(resultHtml) {
            const resultDiv = document.getElementById("demo-result");
            if (resultDiv) {
                resultDiv.innerHTML = resultHtml;
            }
        }

        function showLoadingState(message) {
            displayResult(`
                <div class="text-center text-purple-400">
                    <div class="inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-purple-400"></div>
                    <p class="mt-2">${message}</p>
                </div>
            `);
        }

        // Simulation functions
        function simulateSuccess() {
            showLoadingState("Getting random race...");

            setTimeout(() => {
                const race = "Troll";
                showLoadingState(`Got ${race}! Finding compatible class...`);

                setTimeout(() => {
                    const className = "Shadow Knight";
                    const imagePath = getClassImagePath(className);

                    displayResult(`
                        <div class="bg-slate-700 border border-green-600/30 rounded-lg p-8 text-center">
                            <div class="mb-6">
                                <div class="flex justify-center items-center gap-8 mb-4">
                                    <div class="text-center">
                                        <img src="/assets/images/races/troll-male.png" alt="${race}" class="w-24 h-24 mx-auto rounded-lg shadow-xl border-2 border-green-500/30 object-cover" onerror="this.style.display='none'; this.nextElementSibling.style.display='flex';" />
                                        <div class="w-24 h-24 mx-auto rounded-lg shadow-xl border-2 border-green-500/30 bg-slate-600 hidden items-center justify-center">
                                            <span class="text-3xl">👤</span>
                                        </div>
                                        <p class="text-green-300 text-sm mt-2 font-medium">${race}</p>
                                    </div>
                                    <div class="text-green-400 text-2xl">+</div>
                                    <div class="text-center">
                                        <img src="/assets/images/classes/${imagePath}" alt="${className}" class="w-24 h-24 mx-auto rounded-lg shadow-xl border-2 border-green-500/30 object-cover" />
                                        <p class="text-green-300 text-sm mt-2 font-medium">${className}</p>
                                    </div>
                                </div>
                            </div>
                            <h2 class="text-4xl font-bold text-green-400 mb-3">${className}</h2>
                            <div class="mt-6 p-4 bg-gradient-to-r from-green-900/30 to-green-800/30 rounded-lg border border-green-500/30">
                                <p class="text-green-300 text-xl font-medium">${race} <span class="text-green-100">${className}</span></p>
                                <p class="text-green-400 text-sm mt-2">Perfect character combination!</p>
                            </div>
                            <div class="mt-4 p-3 bg-green-900/20 border border-green-600/30 rounded-lg">
                                <p class="text-green-200 text-sm">✅ Success: Found race with compatible classes on first try</p>
                            </div>
                        </div>
                    `);
                }, 1000);
            }, 500);
        }

        function simulateFallback() {
            showLoadingState("Getting random race...");

            setTimeout(() => {
                const problematicRace = "Froglok";
                showLoadingState(
                    `Got ${problematicRace}! Finding compatible class...`,
                );

                setTimeout(() => {
                    showLoadingState(
                        "No classes found, trying different approach...",
                    );

                    setTimeout(() => {
                        const className = "Warrior";
                        const imagePath = getClassImagePath(className);

                        displayResult(`
                            <div class="bg-slate-700 border border-orange-600/30 rounded-lg p-8 text-center">
                                <div class="mb-6">
                                    <div class="flex justify-center items-center gap-8 mb-4">
                                        <div class="text-center opacity-60">
                                            <div class="w-24 h-24 mx-auto rounded-lg shadow-xl border-2 border-gray-500/30 bg-slate-600 flex items-center justify-center grayscale">
                                                <span class="text-3xl">👤</span>
                                            </div>
                                            <p class="text-gray-400 text-sm mt-2">${problematicRace}</p>
                                        </div>
                                        <div class="text-orange-400 text-2xl">✗</div>
                                        <div class="text-center">
                                            <img src="/assets/images/classes/${imagePath}" alt="${className}" class="w-24 h-24 mx-auto rounded-lg shadow-xl border-2 border-orange-500/30 object-cover" />
                                            <p class="text-orange-300 text-sm mt-2 font-medium">${className}</p>
                                        </div>
                                    </div>
                                </div>
                                <h2 class="text-4xl font-bold text-orange-400 mb-3">${className}</h2>
                                <div class="mt-6 p-3 bg-orange-900/20 border border-orange-600/30 rounded-lg">
                                    <p class="text-orange-200 text-sm">Note: ${problematicRace} had no compatible classes, showing random class instead</p>
                                </div>
                                <p class="text-purple-300 text-lg mt-3">Ready for adventure!</p>
                            </div>
                        `);
                    }, 1000);
                }, 1000);
            }, 500);
        }

        function simulateApiError() {
            showLoadingState("Getting random race...");

            setTimeout(() => {
                displayResult(`
                    <div class="bg-red-900/50 border border-red-600 text-red-200 px-6 py-4 rounded-lg">
                        <div class="flex items-center justify-center">
                            <span class="text-red-400 mr-3 text-xl">❌</span>
                            <span>Error loading class. Please check your connection and try again.</span>
                        </div>
                        <div class="mt-4 p-3 bg-red-800/30 border border-red-600/30 rounded-lg">
                            <p class="text-red-200 text-sm">🛡️ Robust error handling catches API failures gracefully</p>
                        </div>
                    </div>
                `);
            }, 1000);
        }

        function simulateFinalFallback() {
            showLoadingState("Getting random race...");

            setTimeout(() => {
                showLoadingState("Race failed, trying another...");

                setTimeout(() => {
                    showLoadingState(
                        "Still failing, attempting final fallback...",
                    );

                    setTimeout(() => {
                        const className = "Enchanter";
                        const imagePath = getClassImagePath(className);

                        displayResult(`
                            <div class="bg-slate-700 border border-purple-600/30 rounded-lg p-8 text-center">
                                <div class="mb-6">
                                    <div class="relative inline-block">
                                        <img src="/assets/images/classes/${imagePath}" alt="${className}" class="w-32 h-32 mx-auto rounded-lg shadow-xl border-2 border-purple-500/30 object-cover" />
                                    </div>
                                </div>
                                <h2 class="text-4xl font-bold text-purple-400 mb-3">${className}</h2>
                                <p class="text-purple-300 text-lg mt-3">Ready for adventure!</p>
                                <div class="mt-4 p-3 bg-purple-900/20 border border-purple-600/30 rounded-lg">
                                    <p class="text-purple-200 text-sm">🔄 Final fallback result - guaranteed to always work</p>
                                </div>
                            </div>
                        `);
                    }, 1500);
                }, 1000);
            }, 500);
        }

        // Event listeners
        document.addEventListener("DOMContentLoaded", function () {
            const successBtn = document.getElementById("simulate-success");
            const fallbackBtn = document.getElementById("simulate-fallback");
            const errorBtn = document.getElementById("simulate-api-error");
            const finalBtn = document.getElementById("simulate-final-fallback");

            if (successBtn)
                successBtn.addEventListener("click", simulateSuccess);
            if (fallbackBtn)
                fallbackBtn.addEventListener("click", simulateFallback);
            if (errorBtn) errorBtn.addEventListener("click", simulateApiError);
            if (finalBtn)
                finalBtn.addEventListener("click", simulateFinalFallback);

            // Show initial message
            displayResult(`
                <div class="bg-slate-700 border border-slate-600 rounded-lg p-6 text-center">
                    <h3 class="text-lg font-bold text-slate-300 mb-2">Choose a scenario above to see the fallback logic in action</h3>
                    <p class="text-slate-400">This demonstrates how the system ensures users always get a result</p>
                </div>
            `);
        });
    </script>
</Layout>
